{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/hugohammarstrom/repos/stateless.digital/wdn/cdn/multisite-test/pages/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($siteUrl: String) {\\n    sites(where: { name: { equals: $siteUrl } }) {\\n      id\\n      language\\n      languageLabel\\n      name\\n      niche\\n      logotype {\\n        url\\n      }\\n      providers(first: 10) {\\n        id\\n        name\\n        rating\\n        slug\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { client } from \"../modules/apolloClient\";\nimport Link from 'next/link';\nvar siteQuery = gql(_templateObject());\n\nvar IndexPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(IndexPage, _Component);\n\n  function IndexPage() {\n    _classCallCheck(this, IndexPage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IndexPage).apply(this, arguments));\n  }\n\n  _createClass(IndexPage, [{\n    key: \"render\",\n    value: function render() {\n      var providers = this.props.site.providers;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Providers\"), providers.map(function (provider) {\n        return React.createElement(Link, {\n          href: \"/providers/\".concat(provider.slug),\n          prefetch: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"/providers/\".concat(provider.slug),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, provider.name));\n      }), React.createElement(\"pre\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, _JSON$stringify(this.props.site, null, 2)));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx) {\n        var _ref, sites;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return client.query({\n                  query: siteQuery,\n                  variables: {\n                    siteUrl: ctx.req.headers[\"wdn-site-url\"]\n                  }\n                });\n\n              case 2:\n                _ref = _context.sent;\n                sites = _ref.data.sites;\n                return _context.abrupt(\"return\", {\n                  site: sites[0]\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return IndexPage;\n}(Component);\n\nexport { IndexPage as default };","map":{"version":3,"sources":["/Users/hugohammarstrom/repos/stateless.digital/wdn/cdn/multisite-test/pages/index.js"],"names":["React","Component","gql","client","Link","siteQuery","IndexPage","providers","props","site","map","provider","slug","name","ctx","query","variables","siteUrl","req","headers","sites","data"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,IAAMC,SAAS,GAAGH,GAAH,mBAAf;;IAqBqBI,S;;;;;;;;;;;;;6BAYV;AAAA,UACFC,SADE,GACW,KAAKC,KAAL,CAAWC,IADtB,CACFF,SADE;AAEP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGA,SAAS,CAACG,GAAV,CAAc,UAAAC,QAAQ,EAAI;AACzB,eACE,oBAAC,IAAD;AAAM,UAAA,IAAI,uBAAgBA,QAAQ,CAACC,IAAzB,CAAV;AAA2C,UAAA,QAAQ,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAG,UAAA,IAAI,uBAAgBD,QAAQ,CAACC,IAAzB,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyCD,QAAQ,CAACE,IAAlD,CADF,CADF;AAKD,OANA,CAFH,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,gBAAe,KAAKL,KAAL,CAAWC,IAA1B,EAAgC,IAAhC,EAAsC,CAAtC,CAAN,CATF,CADF;AAaD;;;;;;gDA1B4BK,G;;;;;;;;uBACGX,MAAM,CAACY,KAAP,CAAa;AACzCA,kBAAAA,KAAK,EAAEV,SADkC;AAEzCW,kBAAAA,SAAS,EAAE;AACTC,oBAAAA,OAAO,EAAEH,GAAG,CAACI,GAAJ,CAAQC,OAAR,CAAgB,cAAhB;AADA;AAF8B,iBAAb,C;;;;AAAjBC,gBAAAA,K,QAAPC,I,CAAOD,K;iDAON;AAAEX,kBAAAA,IAAI,EAAEW,KAAK,CAAC,CAAD;AAAb,iB;;;;;;;;;;;;;;;;;;;EAT4BnB,S;;SAAlBK,S","sourcesContent":["import React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { client } from \"../modules/apolloClient\";\nimport Link from 'next/link'\n\nconst siteQuery = gql`\n  query($siteUrl: String) {\n    sites(where: { name: { equals: $siteUrl } }) {\n      id\n      language\n      languageLabel\n      name\n      niche\n      logotype {\n        url\n      }\n      providers(first: 10) {\n        id\n        name\n        rating\n        slug\n      }\n    }\n  }\n`;\n\nexport default class IndexPage extends Component {\n  static async getInitialProps(ctx) {\n    let { data: {sites} } = await client.query({\n      query: siteQuery,\n      variables: {\n        siteUrl: ctx.req.headers[\"wdn-site-url\"]\n      }\n    });\n\n    return { site: sites[0] };\n  }\n\n  render() {\n    let {providers} = this.props.site\n    return (\n      <div>\n        <h3>Providers</h3>\n        {providers.map(provider => {\n          return (\n            <Link href={`/providers/${provider.slug}`} prefetch>\n              <a href={`/providers/${provider.slug}`}>{provider.name}</a>\n            </Link>\n          )\n        })}\n        <pre>{JSON.stringify(this.props.site, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}