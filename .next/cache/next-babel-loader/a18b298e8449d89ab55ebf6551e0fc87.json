{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/hugohammarstrom/repos/stateless.digital/wdn/cdn/multisite-test/pages/index.js\";\nimport React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { client } from \"../modules/apolloClient\";\nconst siteQuery = gql`\n  query($siteUrl: String) {\n    sites(where: { name: { equals: $siteUrl } }) {\n      id\n      language\n      languageLabel\n      name\n      niche\n      logotype {\n        url\n      }\n      providers(first: 10) {\n        id\n        name\n        rating\n        slug\n      }\n    }\n  }\n`;\nexport default class IndexPage extends Component {\n  static async getInitialProps(ctx) {\n    let {\n      data: {\n        sites\n      }\n    } = await client.query({\n      query: siteQuery,\n      variables: {\n        siteUrl: ctx.req.headers[\"wdn-site-url\"]\n      }\n    });\n    return {\n      site: sites[0]\n    };\n  }\n\n  render() {\n    let {\n      providers\n    } = this.props.site;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Providers\"), providers.map(provider => {\n      return React.createElement(Link, {\n        href: `/providers/${provider.slug}`,\n        prefetch: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, provider.name);\n    }), React.createElement(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, _JSON$stringify(this.props.site, null, 2)));\n  }\n\n}","map":{"version":3,"sources":["/Users/hugohammarstrom/repos/stateless.digital/wdn/cdn/multisite-test/pages/index.js"],"names":["React","Component","gql","client","siteQuery","IndexPage","getInitialProps","ctx","data","sites","query","variables","siteUrl","req","headers","site","render","providers","props","map","provider","slug","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AAEA,MAAMC,SAAS,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;CAAtB;AAqBA,eAAe,MAAMG,SAAN,SAAwBJ,SAAxB,CAAkC;AAC/C,eAAaK,eAAb,CAA6BC,GAA7B,EAAkC;AAChC,QAAI;AAAEC,MAAAA,IAAI,EAAE;AAACC,QAAAA;AAAD;AAAR,QAAoB,MAAMN,MAAM,CAACO,KAAP,CAAa;AACzCA,MAAAA,KAAK,EAAEN,SADkC;AAEzCO,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,EAAEL,GAAG,CAACM,GAAJ,CAAQC,OAAR,CAAgB,cAAhB;AADA;AAF8B,KAAb,CAA9B;AAOA,WAAO;AAAEC,MAAAA,IAAI,EAAEN,KAAK,CAAC,CAAD;AAAb,KAAP;AACD;;AAEDO,EAAAA,MAAM,GAAG;AACP,QAAI;AAACC,MAAAA;AAAD,QAAc,KAAKC,KAAL,CAAWH,IAA7B;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEGE,SAAS,CAACE,GAAV,CAAcC,QAAQ,IAAI;AACzB,aACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAG,cAAaA,QAAQ,CAACC,IAAK,EAAxC;AAA2C,QAAA,QAAQ,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,QAAQ,CAACE,IADZ,CADF;AAKD,KANA,CAFH,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,gBAAe,KAAKJ,KAAL,CAAWH,IAA1B,EAAgC,IAAhC,EAAsC,CAAtC,CAAN,CATF,CADF;AAaD;;AA3B8C","sourcesContent":["import React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { client } from \"../modules/apolloClient\";\n\nconst siteQuery = gql`\n  query($siteUrl: String) {\n    sites(where: { name: { equals: $siteUrl } }) {\n      id\n      language\n      languageLabel\n      name\n      niche\n      logotype {\n        url\n      }\n      providers(first: 10) {\n        id\n        name\n        rating\n        slug\n      }\n    }\n  }\n`;\n\nexport default class IndexPage extends Component {\n  static async getInitialProps(ctx) {\n    let { data: {sites} } = await client.query({\n      query: siteQuery,\n      variables: {\n        siteUrl: ctx.req.headers[\"wdn-site-url\"]\n      }\n    });\n\n    return { site: sites[0] };\n  }\n\n  render() {\n    let {providers} = this.props.site\n    return (\n      <div>\n        <h3>Providers</h3>\n        {providers.map(provider => {\n          return (\n            <Link href={`/providers/${provider.slug}`} prefetch>\n              {provider.name}\n            </Link>\n          )\n        })}\n        <pre>{JSON.stringify(this.props.site, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}