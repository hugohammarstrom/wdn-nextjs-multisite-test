{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/hugohammarstrom/repos/stateless.digital/wdn/cdn/multisite-test/pages/index.js\";\nimport React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { client } from \"../modules/apolloClient\";\nimport Link from 'next/link';\nconst siteQuery = gql`\n  query($siteUrl: String) {\n    sites(where: { name: { equals: $siteUrl } }) {\n      id\n      language\n      languageLabel\n      name\n      niche\n      logotype {\n        url\n      }\n      providers(first: 10) {\n        id\n        name\n        rating\n        slug\n      }\n    }\n  }\n`;\nexport default class IndexPage extends Component {\n  static async getInitialProps(ctx) {\n    let {\n      data: {\n        sites\n      }\n    } = await client.query({\n      query: siteQuery,\n      variables: {\n        siteUrl: ctx.req.headers[\"wdn-site-url\"]\n      }\n    });\n    return {\n      site: sites[0]\n    };\n  }\n\n  render() {\n    let {\n      site\n    } = this.props;\n    let {\n      providers\n    } = site;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: site.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, site.name)), site.logotype ? React.createElement(\"img\", {\n      src: site.logotype.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }) : null), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Providers\"), providers.map(provider => {\n      return React.createElement(Link, {\n        href: `/providers/${provider.slug}`,\n        prefetch: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, provider.name);\n    }), React.createElement(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, _JSON$stringify(site, null, 2)));\n  }\n\n}","map":{"version":3,"sources":["/Users/hugohammarstrom/repos/stateless.digital/wdn/cdn/multisite-test/pages/index.js"],"names":["React","Component","gql","client","Link","siteQuery","IndexPage","getInitialProps","ctx","data","sites","query","variables","siteUrl","req","headers","site","render","props","providers","url","name","logotype","map","provider","slug"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,MAAMC,SAAS,GAAGH,GAAI;;;;;;;;;;;;;;;;;;;CAAtB;AAqBA,eAAe,MAAMI,SAAN,SAAwBL,SAAxB,CAAkC;AAC/C,eAAaM,eAAb,CAA6BC,GAA7B,EAAkC;AAChC,QAAI;AAAEC,MAAAA,IAAI,EAAE;AAACC,QAAAA;AAAD;AAAR,QAAoB,MAAMP,MAAM,CAACQ,KAAP,CAAa;AACzCA,MAAAA,KAAK,EAAEN,SADkC;AAEzCO,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,EAAEL,GAAG,CAACM,GAAJ,CAAQC,OAAR,CAAgB,cAAhB;AADA;AAF8B,KAAb,CAA9B;AAOA,WAAO;AAAEC,MAAAA,IAAI,EAAEN,KAAK,CAAC,CAAD;AAAb,KAAP;AACD;;AAEDO,EAAAA,MAAM,GAAG;AACP,QAAI;AAACD,MAAAA;AAAD,QAAS,KAAKE,KAAlB;AACA,QAAI;AAACC,MAAAA;AAAD,QAAcH,IAAlB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,IAAI,EAAEA,IAAI,CAACI,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKJ,IAAI,CAACK,IAAV,CAAnB,CADF,EAEIL,IAAI,CAACM,QAAL,GACA;AAAK,MAAA,GAAG,EAAEN,IAAI,CAACM,QAAL,CAAcF,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,GAEE,IAJN,CADF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBARF,EASGD,SAAS,CAACI,GAAV,CAAcC,QAAQ,IAAI;AACzB,aACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAG,cAAaA,QAAQ,CAACC,IAAK,EAAxC;AAA2C,QAAA,QAAQ,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,QAAQ,CAACH,IADZ,CADF;AAKD,KANA,CATH,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,gBAAeL,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAN,CAhBF,CADF;AAoBD;;AAnC8C","sourcesContent":["import React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { client } from \"../modules/apolloClient\";\nimport Link from 'next/link'\n\nconst siteQuery = gql`\n  query($siteUrl: String) {\n    sites(where: { name: { equals: $siteUrl } }) {\n      id\n      language\n      languageLabel\n      name\n      niche\n      logotype {\n        url\n      }\n      providers(first: 10) {\n        id\n        name\n        rating\n        slug\n      }\n    }\n  }\n`;\n\nexport default class IndexPage extends Component {\n  static async getInitialProps(ctx) {\n    let { data: {sites} } = await client.query({\n      query: siteQuery,\n      variables: {\n        siteUrl: ctx.req.headers[\"wdn-site-url\"]\n      }\n    });\n\n    return { site: sites[0] };\n  }\n\n  render() {\n    let {site} = this.props\n    let {providers} = site\n    return (\n      <div>\n        <div>\n          <a href={site.url}><h1>{site.name}</h1></a>\n          { site.logotype ?\n            <img src={site.logotype.url}></img>\n            : null\n          }\n        </div>\n        <h3>Providers</h3>\n        {providers.map(provider => {\n          return (\n            <Link href={`/providers/${provider.slug}`} prefetch>\n              {provider.name}\n            </Link>\n          )\n        })}\n        <pre>{JSON.stringify(site, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}